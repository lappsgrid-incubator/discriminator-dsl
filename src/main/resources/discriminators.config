// Closures used to generate URI in the required formats.
def ns = { "http://vocab.lappsgrid.org/ns/$it" }
def vocab = { "http://vocab.lappsgrid.org/$it" }
def media = { "http://vocab.lappsgrid.org/ns/media/$it" }
def _text = { "http://vocab.lappsgrid.org/ns/media/text#$it" }
def _xml = { "http://vocab.lappsgrid.org/ns/media/xml#$it" }

/*
 * Base types. The ERROR type should always be 0 (zero).
 */
offset(0) {
    error {
        uri ns('error')
        description "Used to indicate that the server encountered an error while processing the request.  The payload SHOULD contain an error message."
    }
    ok {
        uri ns('ok')
        description "Response returned by 'ping' requests."
    }
    meta {
        uri ns('meta')
        description "LAPPS metadata in JSON-LD."
    }
    text {
        uri media('text')
        description "UTF-8 text files."
    }
    xml {
        uri media('xml')
        description "Any format XML file."
    }
    "string-list" {
        parents text
        uri ns('string-list')
        description "A JSON array of strings."
    }
    deprecated {
        uri ns('deprecated')
        description 'Parent type for other deprecated discriminators.'
    }
}

/*
 * System requests and responses.
 */
offset(128) {
    system {
        uri ns('system')
        description 'Parent type for Data objects contains system requests or responses.'
    }
    login {
        parents system
        uri ns('system#login')
        description 'Indicates the payload contains a JSON document conforming to the login-schema.json schema.'
    }
    authorization {
        parents system
        uri ns('system#authorization')
        description """An authorization response from a protected resource. The payload
            must be a JSON document conforming to the authorization-schema.json schema."""
    }
}

/*
 * Text formats
 */
offset(512) {
    "one-per-line" {
        parents text
        uri _text('newline-separated')
        description "A list of strings separate by a single newline (0x0D) character."
    }
    tsv {
        parents text
        uri _text('tab-separated')
        description "A list of strings separate by a single tab (0x09) character."
    }
    csv {
        parents text
        uri _text('comma-separated')
        description "A list of strings separate by a single comma (0x2C) character."
    }
    "space-separated" {
        uri _text('space-separated')
        description "A list of string separated by one, or more white space characters (0x20) or tabs (0x09)."
    }
}

/*
 * Document types.
 */
bank(1) {
    document {
        uri vocab('Document')
        description "Any document format."
    }
    gate {
        description "A GATE/XML document."
        parents document, xml
        uri _xml('gate')
    }
    uima {
        description "A UIMA CAS object."
        parents document, xml
        uri _xml('uima-cas')
    }
    stanford {
        uri _text('stanford')
        description "Files produced by the Stanford NLP Tools."
        parents document, 'one-per-line'
    }
    opennlp {
        uri _text('opennlp')
        description "Files produces by the Apache OpenNLP tools."
        parents document, 'one-per-line'
    }
    graf {
        uri _xml('graf-standoff')
        description "GrAF/XML Standoff annotation file."
        parents document, xml
    }
    ptb {
        uri _text('ptb')
        description "Penn TreeBank Lisp-like format."
        parents document
    }
    json {
        uri media('json')
        description "Javascript Object Notation."
        parents document
    }
    'json-ld' {
        uri media('jsonld')
        description "JSON for Linked Data."
        parents json
    }
    lif {
        uri media('jsonld#lif')
        description "LAPPS Interchange format. (LIF)"
        parents 'json-ld'
    }
}
offset(1034) {
    lapps {
        uri media('jsonld#lif')
        description "LAPPS Interchange format. (LIF)"
        parents 'json-ld'
    }
    ldc {
        uri _xml('ldc')
        description "XML format returned by LDC data sources."
        parents document, xml
    }
}

/*
 * Annotation types.
 */
bank(2) {
    annotation {
        uri vocab('Annotation')
        description "Any type of annotation."
    }
    chunk {
        uri vocab('Chunk')
        description "Any type of annotations that segments the primary data into chunks."
        parents annotation
    }
    paragraph {
        uri vocab('Paragraph')
        description "Paragraphs."
        parents chunk
    }
    sentence {
        uri vocab('Sentence')
        description "Sentences."
        parents chunk
    }
    token {
        uri vocab('Token')
        description "Tokens"
        parents chunk
    }
    pos {
        uri vocab('Token#pos')
        parents annotation
        description "Part-Of-Speech tag. The tagset used should be specified in metadata."
    }
    coref {
        parents annotation
        uri vocab('Coreference')
        description "Coreference annotations."
    }
    ne {
       parents annotation
        uri vocab('NamedEntity')
        description "A date or the name of a person, location, or organization."
    }
    person {
        parents ne
        uri vocab('Person')
        description 'The name of a person.'
    }
    location {
        parents ne
        uri vocab('Location')
        description 'A location.'
    }
    date {
        parents ne
        uri vocab('Date')
        description 'Any form of time or date.'
    }
    organization {
        parents ne
        uri vocab('Organization')
        description 'The name of an organization.'
    }
    nchunk {
        parents chunk
        uri vocab('NounChunk')
    }
    vchunk {
        parents chunk
        uri vocab('VerbChunk')
    }
    lemma {
        parents annotation
        uri vocab('Token#lemma')
    }
    lookup {
        parents annotation
        uri vocab('Lookup')
    }
    matches {
        parents annotation
        uri vocab('NamedEntity#matches')
    }
    markable {
        parents annotation
        uri vocab('Markable')
        description 'Annotation type used if the coreferenced item is not already wrapped in a suitable annotation type that can be referenced.'
    }
    "dependency-structure" {
        parents annotation
        uri vocab('DependencyStructure')
        description 'A container for dependency structure information.'
    }
    "phrase-structure" {
        parents annotation
        uri vocab('PhraseStructure')
        description 'A container for phrase structure information.'
    }
    relation {
        parents annotation
        uri vocab('Relation')
        description 'A relation between two annotated entites.'
    }
    constituent {
        parents relation
        uri vocab('Constituent')
        description 'A constituent of a phrase structure (parse tree).'
    }
    dependency {
        parents relation
        uri vocab('Dependency')
        description 'A dependency relation in a dependency structure.'
    }
    "semantic-role" {
        parents relation
        uri vocab('SemanticRole')
        description 'The semantic role assumed by the entity.'
    }
}

/*
 * Query types.
 */
bank(3) {
    query {
        uri ns('action/query')
        description 'The base type for any type of query contained in the payload of a Data object.'
    }
    get {
        uri ns('action/get')
         description 'Discriminator used to fetch a single artifact from a DataSource.'
    }
    index {
        uri ns('action/index')
        description 'Used to request that a DataSource return an index of all artifacts it contains.'
    }
    list  {
        uri ns('action/list')
        description 'Used to request that a DataSource return an index of all artifacts it contains.'
    }
    lucene {
        parents query
        uri ns('action/query#lucene')
        description 'Reserved for future use. Indicates that the payload contains a Lucene query.'
    }
    sql {
        parents query
        uri ns('action/query#sql')
        description 'Reserved for future use. Indicates that the payload contains an SQL query.'
    }
    sparql {
        parents query
        uri ns('action/query#sparql')
        description 'Reserved for future use. Indicates that the payload contains a Sparql query.'
    }
    regex {
        parents query
        uri ns('action/query#regex')
        description 'Reserved for future use. Indicates that the payload contains a regular expression to be used as a query.'

    }
    composite {
        parents query
        uri ns('action/query#composite')
        description 'Reserved for future use.'
    }
    size {
        parents query
        uri ns('action/size')
        description 'Returns the number of artifacts managed by a DataSource.'
    }
    getMetadata {
        parents deprecated
        uri ns('action/get-metadata')
        description 'Returns the metadata for the service.'
    }
    execute {
        parents query
        uri ns('action/execute')
        description 'Invokes the execute method on a processing service.'
    }
    solr {
        parents query
        uri ns('action/query#solr')
        description 'Indicates that the payload contains a SOLR query.'
    }
    solr-schema {
        parents solr
        uri ns('action/query#solr-schema')
        description 'Discriminator used to request that a SOLR data source return its schema.'
    }
}

// 524287 is 512 * 1024 - 1, so one less than the
// start of bank 512
// offset(524287) {
offset(bank(512)-1) {
    license {
        uri ns('license')
         description 'Recognized license types.'
    }
}
bank(512) {
    'public-domain' {
        parents license
        uri ns("license#public-domain")
        description 'Works released into the public domain. This includes CC0 or other works marked as "No rights reserved."'
    }
    'open-source' {
        parents license
        uri ns('license#open-source')
        description 'Any open source license recognized by the Open Source Initiative (http://opensource.org)'
    }
    apache2 {
        parents 'open-source'
        uri ns('license#apache-2.0')
        description 'The Apache 2.0 license. See http://www.apache.org/licenses/LICENSE-2.0.html'
    }
    gpl {
        parents 'open-source'
        uri ns('license#gpl')
        description 'The General Public License by the Free Software Foundation. See http://www.gnu.org/copyleft/gpl.html'
    }
    lgpl {
        parents 'open-source'
        uri ns('license#lgpl')
        description 'The Lesser General Public License by the Free Software Foundation. See http://www.gnu.org/copyleft/lgpl.html'
    }
    bsd {
        parents 'open-source'
        uri ns('license#bsd')
        description 'The original (4 clause) BSD license. It is a free software license, but is not compatible with the GPL.'
    }
    eclipse {
        parents 'open-source'
        uri ns('license#eclipse')
        description 'The Eclipse Public License (EPL) 1.0'
    }
    'no-commercial' {
        parents license
        uri ns('license#non-commercial')
        description 'Any license that prohibits commercial use.'
    }
    restricted {
        parents license
        uri ns('license#restricted')
        description 'Reserved for future use.'
    }
    gpl2 {
        parents gpl
        uri ns('license#gpl-2.0')
        description 'The General Public License (GPL) Version 2.0'
    }
    gpl3 {
        parents gpl
        uri ns('license#gpl-3.0')
        description 'The General Public License (GPL) Version 3.0'
    }
    lgpl21 {
        parents lgpl
        uri ns('license#lgpl-2.1')
        description 'The Lesser General Public License (LGPL) Version 2.1'
    }
    lgpl3 {
        parents lgpl
        uri ns('license#lgpl-3.0')
        description 'The Lesser General Public License (LGPL) Version 3.0'
    }
    bsd2 {
        parents bsd
        uri  ns('license#bsd-2-clause')
        description 'Two clause BSD license.'
    }
    bsd3 {
        parents bsd
        uri  ns('license#bsd-3-clause')
        description 'Three clause BSD license.'
    }
    mit {
        parents 'open-source'
        uri ns('license#mit')
        description 'The MIT license.'
    }
    cc {
        parents 'license'
        uri ns('license#cc')
        description 'The Creative Commons family of licenses. See https://creativecommons.org/licenses/'
    }
    cc0 {
        parents 'cc'
        uri ns('license#cc0')
        description 'Creative Commons Zero (CC0) licenses. Essentially a public domain license.'
    }
    'cc-by' {
        parents 'cc'
        uri ns('license#cc-by')
        description 'Creative Commons Attribution required'
    }
    'cc-by-sa' {
        parents 'cc-by'
        uri ns('license#cc-by-sa')
        description 'Creative Commons Attribution ShareAlike'
    }
    'cc-by-nd' {
        parents 'cc-by'
        uri ns('license#cc-by-nd')
        description 'Creative Commons Attribution No Derivatives'
    }
    'cc-by-nc' {
        parents 'cc-by'
        uri ns('license#cc-by-nc')
        description 'Creative Commons Attribution Non-Commercial'
    }
    'cc-by-nc-sa' {
        parents 'cc-by-sa', 'cc-by-nc'
        uri ns('license#cc-by-nc-sa')
        description 'Creative Commons Attribution Non-Commercial ShareAlike'
    }
    'cc-by-nc-nd' {
        parents 'cc-by-nc', 'cc-by-nd'
        uri ns('license#cc-by-nc-nd')
        description 'Creative Commons Attribution Non-Commercial No Derivatives'
    }
}

// Helper function for creating URI
def allow = { ns("allow#$it") }

// 525311 is one less than the start of bank 513
// offset(525311) {
offset(bank(513)-1) {
    usage {
        uri ns('allow')
        description 'Usage restrictions for services.'
    }
}
bank(513) {
    research {
        parents usage
        uri allow('research')
        description 'The service may be used for research purposes.'
    }
    commercial {
        parents usage
        uri allow('commercial')
        description 'The service may be used for commercial purposes.'
    }
    education {
        parents usage
        uri allow('education')
        description 'The service may be used for educational purposes.'
    }
    'non-profit' {
        parents usage
        uri allow('non-profit')
        description 'The service may be used for non-profit purposes.'
    }
    personal {
        parents usage
        uri allow('personal')
        description 'The service may be used for personal purposes.'
    }
    all {
        parents research, commercial, education, 'non-profit', personal
        uri allow('any')
        description 'The service may be used without restriction.'
    }
}
